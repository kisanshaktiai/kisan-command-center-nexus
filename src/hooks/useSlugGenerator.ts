
import { useState, useEffect, useCallback } from 'react';
import { useSlugValidation } from './useSlugValidation';

export const useSlugGenerator = (organizationName: string, currentTenantId?: string) => {
  const [slug, setSlug] = useState('');
  const [isAutoGenerated, setIsAutoGenerated] = useState(true);
  const [suggestions, setSuggestions] = useState<string[]>([]);
  
  const { isValid: isSlugValid, isChecking: isSlugChecking, error: slugError } = useSlugValidation(
    slug, 
    currentTenantId
  );

  // Generate slug from organization name
  const generateSlug = useCallback((name: string) => {
    if (!name?.trim()) return '';
    
    let generatedSlug = name
      .toLowerCase()
      .trim()
      .replace(/[^a-z0-9\s-]/g, '') // Remove invalid characters
      .replace(/\s+/g, '-') // Replace spaces with hyphens
      .replace(/-+/g, '-') // Replace multiple hyphens with single
      .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
    
    // Ensure minimum length
    if (generatedSlug.length < 3) {
      generatedSlug = generatedSlug + '-org';
    }
    
    // Ensure maximum length
    if (generatedSlug.length > 50) {
      generatedSlug = generatedSlug.substring(0, 50).replace(/-+$/, '');
    }
    
    return generatedSlug;
  }, []);

  // Generate alternative suggestions when slug is taken
  const generateSuggestions = useCallback((baseSlug: string) => {
    const suggestions = [];
    for (let i = 1; i <= 5; i++) {
      suggestions.push(`${baseSlug}-${i}`);
    }
    suggestions.push(`${baseSlug}-${new Date().getFullYear()}`);
    suggestions.push(`${baseSlug}-inc`);
    suggestions.push(`${baseSlug}-co`);
    return suggestions;
  }, []);

  // Auto-generate slug when organization name changes
  useEffect(() => {
    if (isAutoGenerated && organizationName?.trim()) {
      const newSlug = generateSlug(organizationName);
      setSlug(newSlug);
      
      // Generate suggestions for this slug
      const newSuggestions = generateSuggestions(newSlug);
      setSuggestions(newSuggestions);
    }
  }, [organizationName, isAutoGenerated, generateSlug, generateSuggestions]);

  const handleSlugChange = (newSlug: string) => {
    setSlug(newSlug);
    setIsAutoGenerated(false); // Manual override
  };

  const regenerateSlug = () => {
    if (organizationName?.trim()) {
      const newSlug = generateSlug(organizationName);
      setSlug(newSlug);
      setIsAutoGenerated(true);
      
      const newSuggestions = generateSuggestions(newSlug);
      setSuggestions(newSuggestions);
    }
  };

  const useSuggestion = (suggestedSlug: string) => {
    setSlug(suggestedSlug);
    setIsAutoGenerated(false);
  };

  return {
    slug,
    setSlug: handleSlugChange,
    isSlugValid,
    isSlugChecking,
    slugError,
    isAutoGenerated,
    suggestions: slugError ? suggestions : [],
    regenerateSlug,
    useSuggestion
  };
};
