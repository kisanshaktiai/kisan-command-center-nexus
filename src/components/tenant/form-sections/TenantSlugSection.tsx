
import React, { useEffect } from 'react';
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { CheckCircle, XCircle, Loader2, RefreshCw, Lightbulb } from 'lucide-react';
import { TenantFormData } from '@/types/tenant';
import { useSlugGenerator } from '@/hooks/useSlugGenerator';

interface TenantSlugSectionProps {
  formData: TenantFormData;
  onFieldChange: (field: keyof TenantFormData, value: string | number) => void;
  currentTenantId?: string;
}

export const TenantSlugSection: React.FC<TenantSlugSectionProps> = ({
  formData,
  onFieldChange,
  currentTenantId
}) => {
  const {
    slug,
    setSlug,
    isSlugValid,
    isSlugChecking,
    slugError,
    isAutoGenerated,
    suggestions,
    regenerateSlug,
    useSuggestion
  } = useSlugGenerator(formData.name || '', currentTenantId);

  // Sync slug with form data
  useEffect(() => {
    if (slug !== formData.slug) {
      onFieldChange('slug', slug);
    }
  }, [slug, formData.slug, onFieldChange]);

  const getSlugValidationIcon = () => {
    if (!slug) return null;
    if (isSlugChecking) return <Loader2 className="w-4 h-4 animate-spin text-gray-500" />;
    if (isSlugValid) return <CheckCircle className="w-4 h-4 text-green-500" />;
    return <XCircle className="w-4 h-4 text-red-500" />;
  };

  return (
    <Card>
      <CardContent className="pt-6">
        <div className="space-y-2">
          <Label htmlFor="slug" className="flex items-center gap-2">
            Slug *
            {isAutoGenerated && (
              <span className="text-xs text-green-600 bg-green-50 px-2 py-1 rounded">Auto-generated</span>
            )}
          </Label>
          <div className="relative">
            <Input
              id="slug"
              value={slug}
              onChange={(e) => setSlug(e.target.value.toLowerCase())}
              placeholder="organization-slug"
              required
              className={`pr-20 ${
                slugError ? 'border-red-500' : 
                isSlugValid ? 'border-green-500' : ''
              }`}
            />
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center gap-1">
              {getSlugValidationIcon()}
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={regenerateSlug}
                className="h-6 w-6 p-0 hover:bg-gray-100"
                title="Regenerate slug"
              >
                <RefreshCw className="w-3 h-3" />
              </Button>
            </div>
          </div>
          {slugError && (
            <div className="space-y-2">
              <p className="text-sm text-red-500">{slugError}</p>
              {suggestions.length > 0 && (
                <div className="bg-amber-50 border border-amber-200 rounded-lg p-3">
                  <div className="flex items-center gap-2 mb-2">
                    <Lightbulb className="w-4 h-4 text-amber-600" />
                    <span className="text-sm font-medium text-amber-800">Suggested alternatives:</span>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {suggestions.slice(0, 3).map((suggestion) => (
                      <Button
                        key={suggestion}
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => useSuggestion(suggestion)}
                        className="text-xs h-7"
                      >
                        {suggestion}
                      </Button>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
          {isSlugValid && (
            <p className="text-sm text-green-500">Slug is available</p>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
